About me
I am Jack Manning, I am an Electromechanical Engineer at Wentworth Institute of Technology in Boston, MA. I have been interested in programing my entire life, and am looking to minor in computer sciences here. Most of my interests fall outside of the field of strict computer science, mostly in robotics, but I also enjoy the hobby of competition shooting. It is a very relaxing activity for me, as it gives me a way to escape all the problems of my life, for a small time at least. I hope that my code proves useful for you, and that you learn something from it. I am open to any help or criticism you would like to give me, and actually welcome it.

How it works: This code uses the OpenCV library to read a picture of an air rifle target, find circles in the image, and determine what score the target should get, based on what ring is broken in the target. To find the circles, it performs a contour detect test on the image, which takes a black and white image and finds all of the borders between the two. Once this is done, it goes through and test every detected contour to see if it matches the description of a circle, testing for points that should be inside the "circle" and outside the "circle". This removes all contours that do not match the profile of a circle. Once this is done, and the circles are saved in a separate file, it starts to average the circles whose radii are within 9% of each other. This saves all circles in the image, in the form of center points and radii, in a vector, which is then run through to see if there is a missing circle in the vector. If there is an abnormally large gap between two of the circles in the image, the code points it out, and assumes that there was a complete circle there, but it was broken by the air rifle. After we find and print the score of the target, correlating to the missing ring on the target, we print all of the other detected circles on the source image, and display it to the user, so they can know if the code missed a circle that should have been hit or any other anomaly. If the code is run in debug mode, it will print out additional information during the testing, including showing all of the detected contours, and a visualization of the pointInContour() tests in action.
